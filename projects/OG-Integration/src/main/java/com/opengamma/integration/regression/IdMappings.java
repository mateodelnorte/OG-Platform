/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.regression;

import java.util.Collections;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;

import com.google.common.collect.ImmutableMap;
import com.opengamma.id.ObjectId;
import org.joda.beans.BeanBuilder;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 */
@BeanDefinition
public final class IdMappings extends DirectBean {

  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<ObjectId, Integer> _ids;

  @PropertyDefinition
  private final int _maxId;

  public IdMappings(Map<ObjectId, Integer> ids, int maxId) {
    JodaBeanUtils.notNull(ids, "ids");
    this._ids = ImmutableMap.copyOf(ids);
    this._maxId = maxId;
  }

  public IdMappings() {
    this(Collections.<ObjectId, Integer>emptyMap(), -1);
  }

  public Integer getId(ObjectId objectId) {
    return _ids.get(objectId);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IdMappings}.
   * @return the meta-bean, not null
   */
  public static IdMappings.Meta meta() {
    return IdMappings.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IdMappings.Meta.INSTANCE);
  }

  @Override
  public IdMappings.Meta metaBean() {
    return IdMappings.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 104120:  // ids
        return getIds();
      case 103671199:  // maxId
        return getMaxId();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 104120:  // ids
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: ids");
      case 103671199:  // maxId
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: maxId");
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_ids, "ids");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IdMappings other = (IdMappings) obj;
      return JodaBeanUtils.equal(getIds(), other.getIds()) &&
          JodaBeanUtils.equal(getMaxId(), other.getMaxId());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getIds());
    hash += hash * 31 + JodaBeanUtils.hashCode(getMaxId());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the ids.
   * @return the value of the property, not null
   */
  public ImmutableMap<ObjectId, Integer> getIds() {
    return _ids;
  }

  /**
   * Gets the the {@code ids} property.
   * @return the property, not null
   */
  public final Property<ImmutableMap<ObjectId, Integer>> ids() {
    return metaBean().ids().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the maxId.
   * @return the value of the property
   */
  public int getMaxId() {
    return _maxId;
  }

  /**
   * Gets the the {@code maxId} property.
   * @return the property, not null
   */
  public final Property<Integer> maxId() {
    return metaBean().maxId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IdMappings}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code ids} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<ObjectId, Integer>> _ids = DirectMetaProperty.ofReadOnly(
        this, "ids", IdMappings.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code maxId} property.
     */
    private final MetaProperty<Integer> _maxId = DirectMetaProperty.ofReadOnly(
        this, "maxId", IdMappings.class, Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "ids",
        "maxId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 104120:  // ids
          return _ids;
        case 103671199:  // maxId
          return _maxId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IdMappings> builder() {
      return new DirectBeanBuilder<IdMappings>(new IdMappings());
    }

    @Override
    public Class<? extends IdMappings> beanType() {
      return IdMappings.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code ids} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ImmutableMap<ObjectId, Integer>> ids() {
      return _ids;
    }

    /**
     * The meta-property for the {@code maxId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> maxId() {
      return _maxId;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
